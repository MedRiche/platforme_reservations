const Reservation = require('../models/Reservation');
const { sendReservationMail } = require('../utils/mailer');
const User = require('../models/User');
const Espace = require('../models/Espace');
const { sendAnnulationMail } = require('../utils/mailer');
const { sendConfirmationStatutMail } = require('../utils/mailer');

exports.createReservation = async (req, res) => {
  try {
    const { espace, dateDebut, dateFin } = req.body;
    const utilisateur = req.user.id;

    // V√©rifier conflits
    const conflits = await Reservation.findOne({
      espace,
      statut: 'confirm√©e',
      $or: [
        {
          dateDebut: { $lt: dateFin },
          dateFin: { $gt: dateDebut }
        }
      ]
    });

    if (conflits) {
      return res.status(400).json({ message: 'Cr√©neau d√©j√† r√©serv√© pour cet espace.' });
    }

    const nouvelleReservation = new Reservation({
      utilisateur,
      espace,
      dateDebut,
      dateFin,
      statut: 'en attente' // ‚úÖ ici
    });

    await nouvelleReservation.save();

    // Envoi d‚Äôe-mail de confirmation
    const user = await User.findById(utilisateur);
    const espaceInfo = await Espace.findById(espace);

    await sendReservationMail(
      user.email,
      espaceInfo.nom,
      dateDebut,
      dateFin
    );

    res.status(201).json(nouvelleReservation);

  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

exports.getUserReservations = async (req, res) => {
  try {
    const reservations = await Reservation.find({ utilisateur: req.user.id }).populate('espace');

    res.json(reservations);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

exports.deleteReservation = async (req, res) => {
  try {
    console.log('Demande d‚Äôannulation re√ßue');

    const reservation = await Reservation.findById(req.params.id)
      .populate('utilisateur')
      .populate('espace');

    if (!reservation) {
      console.log('R√©servation introuvable');
      return res.status(404).json({ message: 'R√©servation non trouv√©e' });
    }

    if (reservation.utilisateur._id.toString() !== req.user.id) {
      console.log('Utilisateur non autoris√©');
      return res.status(403).json({ message: 'Non autoris√©' });
    }

    // Marquer comme annul√©e (ne pas supprimer pour garder un historique)
    reservation.statut = 'annul√©e';
    await reservation.save();

    // Envoi de l‚Äôe-mail
    console.log('Envoi mail √† :', reservation.utilisateur.email);
    await sendAnnulationMail(
      reservation.utilisateur.email,
      reservation.espace.nom,
      reservation.dateDebut,
      reservation.dateFin
    );

    res.status(200).json({ message: 'R√©servation annul√©e' });

  } catch (error) {
    console.error('Erreur lors de l‚Äôannulation:', error);
    res.status(500).json({ message: 'Erreur lors de l‚Äôannulation.' });
  }
};


// PATCH /api/reservations/:id/confirmer
exports.confirmerReservation = async (req, res) => {
  try {
    console.log("üìå Tentative confirmation r√©servation :", req.params.id);
    const reservation = await Reservation.findById(req.params.id)
      .populate('utilisateur')
      .populate('espace');

    if (!reservation) {
      console.log("‚ùå R√©servation introuvable");
      return res.status(404).json({ message: 'R√©servation non trouv√©e' });
    }

    reservation.statut = 'confirm√©e';
    await reservation.save();

    console.log("‚úÖ Statut mis √† jour, envoi email √† :", reservation.utilisateur.email);

    await sendConfirmationStatutMail(
      reservation.utilisateur.email,
      reservation.espace.nom,
      reservation.dateDebut,
      reservation.dateFin
    );

    res.json({ message: 'R√©servation confirm√©e avec succ√®s' });

  } catch (err) {
    console.error("üí• Erreur lors de la confirmation :", err);
    res.status(500).json({ message: 'Erreur lors de la confirmation.' });
  }
};


// GET /api/reservations/espace/:id
exports.getReservationsByEspace = async (req, res) => {
  try {
    const espaceId = req.params.id;
    const reservations = await Reservation.find({
      espace: espaceId,
      statut: { $ne: 'annul√©e' } // ignore annul√©es
    });
    res.json(reservations);
  } catch (err) {
    console.error('Erreur getReservationsByEspace:', err);
    res.status(500).json({ message: err.message });
  }
};